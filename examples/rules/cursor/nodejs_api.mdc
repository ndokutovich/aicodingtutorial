# Правила для Node.js API
---
Description: Основные правила для разработки бэкенда на Node.js
Globs: src/api/*.js, src/routes/*.js, src/controllers/*.js, src/services/*.js, src/models/*.js
---

Вы эксперт в разработке бэкенд-приложений на Node.js с Express и MongoDB.

## Архитектура
- Следуйте архитектуре MVC или более современной Clean Architecture
- Разделяйте маршруты, контроллеры, сервисы и модели
- Используйте middleware для повторяющейся логики
- Инкапсулируйте бизнес-логику в сервисном слое
- Применяйте принцип единственной ответственности
- Избегайте глубокой вложенности колбэков, используйте async/await

## Обработка данных
- Валидируйте входящие данные через middleware (например, Joi или express-validator)
- Используйте Mongoose для работы с MongoDB
- Структурируйте ответы API в едином формате
- Применяйте пагинацию для больших наборов данных
- Используйте подход Repository для работы с базой данных
- Документируйте API через OpenAPI/Swagger

## Безопасность
- Санитизируйте пользовательский ввод
- Применяйте CORS с указанием разрешенных источников
- Используйте JWT для авторизации
- Защищайте от основных уязвимостей (XSS, CSRF, инъекции)
- Хэшируйте пароли с использованием bcrypt
- Используйте Helmet для настройки HTTP-заголовков безопасности
- Ограничивайте частоту запросов (rate limiting)

## Обработка ошибок
- Создавайте централизованное middleware для обработки ошибок
- Классифицируйте ошибки по типам (валидация, авторизация, бизнес-логика)
- Предоставляйте понятные сообщения об ошибках
- Логируйте ошибки с достаточным контекстом
- Возвращайте соответствующие HTTP-коды состояния

## Производительность
- Используйте кэширование для частых запросов (Redis)
- Оптимизируйте запросы к базе данных (индексы, проекции, агрегации)
- Применяйте сжатие ответов (compression)
- Избегайте блокировки event loop
- Используйте кластеризацию для масштабирования
- Профилируйте и мониторьте производительность

## Логирование и мониторинг
- Внедрите структурированное логирование
- Используйте разные уровни логирования (info, warn, error)
- Интегрируйте инструменты мониторинга и трассировки
- Собирайте метрики производительности
- Настройте алерты для критических проблем

## Тестирование
- Пишите юнит-тесты для бизнес-логики
- Создавайте интеграционные тесты для API
- Используйте моки для внешних сервисов
- Тестируйте обработку ошибок
- Настройте CI/CD с автоматическим запуском тестов 
# Правила для Flutter проекта
---
Description: Основные правила для разработки мобильных приложений на Flutter
Globs: *.dart
---

Вы эксперт в разработке мобильных приложений на Flutter и Dart.

## Архитектура
- Следуйте архитектуре Clean Architecture или MVVM
- Разделяйте код на слои: представление (UI), бизнес-логика, данные
- Используйте зависимости в одном направлении (UI → логика → данные)
- Применяйте Dependency Injection для управления зависимостями
- Следуйте принципам SOLID
- Используйте BLoC, Provider, Riverpod или GetX для управления состоянием

## Стиль кода
- Следуйте руководству по стилю Dart и Flutter
- Используйте camelCase для переменных и методов
- Применяйте snake_case для файлов
- Избегайте длинных методов (не более 30 строк)
- Декомпозируйте сложные выражения
- Используйте final и const, где это возможно
- Применяйте trailing commas для автоматического форматирования

## Виджеты
- Разбивайте сложные виджеты на более мелкие
- Используйте константные конструкторы для неизменяемых виджетов
- Создавайте переиспользуемые компоненты
- Применяйте StatelessWidget везде, где возможно
- Выделяйте бизнес-логику из виджетов в отдельные классы
- Используйте SliverList вместо ListView для больших списков
- Избегайте чрезмерной вложенности виджетов (максимум 3-4 уровня)

## Работа с данными
- Используйте Repository Pattern для абстракции источников данных
- Применяйте кэширование для часто используемых данных
- Обрабатывайте состояния загрузки, ошибки и пустые результаты
- Преобразуйте сетевые модели в доменные модели
- Используйте immutable классы для моделей данных
- Применяйте freezed для генерации иммутабельных классов

## Асинхронность
- Используйте async/await вместо вложенных колбэков
- Правильно обрабатывайте исключения в асинхронном коде
- Применяйте StreamBuilder или FutureBuilder для отображения асинхронных данных
- Оптимизируйте загрузку данных, используя индикаторы прогресса
- Кэшируйте результаты асинхронных операций где это уместно

## Производительность
- Используйте конструктор const для виджетов
- Оптимизируйте перерисовки с помощью keys
- Применяйте ленивую загрузку для тяжелых ресурсов
- Используйте кэширование для сетевых запросов и изображений
- Применяйте ValueNotifier для локальных обновлений состояния
- Оптимизируйте изображения и ресурсы
- Используйте инструменты профилирования Flutter DevTools

## Адаптивность
- Проектируйте интерфейс с учетом различных размеров экрана
- Используйте MediaQuery для адаптации контента
- Применяйте адаптивные единицы измерения вместо фиксированных
- Тестируйте на различных устройствах и ориентациях
- Учитывайте Safe Area и системные отступы
- Используйте LayoutBuilder для адаптивной компоновки

## Локализация
- Используйте flutter_localizations для мультиязычности
- Выносите все строки в файлы локализации
- Поддерживайте форматирование чисел, дат и валют согласно локали
- Тестируйте интерфейс на разных языках
- Учитывайте направление текста (RTL/LTR)

## Тестирование
- Пишите юнит-тесты для бизнес-логики и моделей
- Создавайте виджет-тесты для UI-компонентов
- Используйте интеграционные тесты для проверки потоков приложения
- Проверяйте поведение при различных состояниях данных
- Поддерживайте высокое покрытие кода тестами 